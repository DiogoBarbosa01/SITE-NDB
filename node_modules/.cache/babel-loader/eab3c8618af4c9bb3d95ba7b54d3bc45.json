{"ast":null,"code":"import { n as nextTick, l as elementTransitionEnd } from '../shared/utils.mjs';\n/* eslint no-bitwise: [\"error\", { \"allow\": [\">>\"] }] */\n\nfunction Controller(_ref) {\n  let {\n    swiper,\n    extendParams,\n    on\n  } = _ref;\n  extendParams({\n    controller: {\n      control: undefined,\n      inverse: false,\n      by: 'slide' // or 'container'\n\n    }\n  });\n  swiper.controller = {\n    control: undefined\n  };\n\n  function LinearSpline(x, y) {\n    const binarySearch = function search() {\n      let maxIndex;\n      let minIndex;\n      let guess;\n      return (array, val) => {\n        minIndex = -1;\n        maxIndex = array.length;\n\n        while (maxIndex - minIndex > 1) {\n          guess = maxIndex + minIndex >> 1;\n\n          if (array[guess] <= val) {\n            minIndex = guess;\n          } else {\n            maxIndex = guess;\n          }\n        }\n\n        return maxIndex;\n      };\n    }();\n\n    this.x = x;\n    this.y = y;\n    this.lastIndex = x.length - 1; // Given an x value (x2), return the expected y2 value:\n    // (x1,y1) is the known point before given value,\n    // (x3,y3) is the known point after given value.\n\n    let i1;\n    let i3;\n\n    this.interpolate = function interpolate(x2) {\n      if (!x2) return 0; // Get the indexes of x1 and x3 (the array indexes before and after given x2):\n\n      i3 = binarySearch(this.x, x2);\n      i1 = i3 - 1; // We have our indexes i1 & i3, so we can calculate already:\n      // y2 := ((x2−x1) × (y3−y1)) ÷ (x3−x1) + y1\n\n      return (x2 - this.x[i1]) * (this.y[i3] - this.y[i1]) / (this.x[i3] - this.x[i1]) + this.y[i1];\n    };\n\n    return this;\n  }\n\n  function getInterpolateFunction(c) {\n    swiper.controller.spline = swiper.params.loop ? new LinearSpline(swiper.slidesGrid, c.slidesGrid) : new LinearSpline(swiper.snapGrid, c.snapGrid);\n  }\n\n  function setTranslate(_t, byController) {\n    const controlled = swiper.controller.control;\n    let multiplier;\n    let controlledTranslate;\n    const Swiper = swiper.constructor;\n\n    function setControlledTranslate(c) {\n      if (c.destroyed) return; // this will create an Interpolate function based on the snapGrids\n      // x is the Grid of the scrolled scroller and y will be the controlled scroller\n      // it makes sense to create this only once and recall it for the interpolation\n      // the function does a lot of value caching for performance\n\n      const translate = swiper.rtlTranslate ? -swiper.translate : swiper.translate;\n\n      if (swiper.params.controller.by === 'slide') {\n        getInterpolateFunction(c); // i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid\n        // but it did not work out\n\n        controlledTranslate = -swiper.controller.spline.interpolate(-translate);\n      }\n\n      if (!controlledTranslate || swiper.params.controller.by === 'container') {\n        multiplier = (c.maxTranslate() - c.minTranslate()) / (swiper.maxTranslate() - swiper.minTranslate());\n\n        if (Number.isNaN(multiplier) || !Number.isFinite(multiplier)) {\n          multiplier = 1;\n        }\n\n        controlledTranslate = (translate - swiper.minTranslate()) * multiplier + c.minTranslate();\n      }\n\n      if (swiper.params.controller.inverse) {\n        controlledTranslate = c.maxTranslate() - controlledTranslate;\n      }\n\n      c.updateProgress(controlledTranslate);\n      c.setTranslate(controlledTranslate, swiper);\n      c.updateActiveIndex();\n      c.updateSlidesClasses();\n    }\n\n    if (Array.isArray(controlled)) {\n      for (let i = 0; i < controlled.length; i += 1) {\n        if (controlled[i] !== byController && controlled[i] instanceof Swiper) {\n          setControlledTranslate(controlled[i]);\n        }\n      }\n    } else if (controlled instanceof Swiper && byController !== controlled) {\n      setControlledTranslate(controlled);\n    }\n  }\n\n  function setTransition(duration, byController) {\n    const Swiper = swiper.constructor;\n    const controlled = swiper.controller.control;\n    let i;\n\n    function setControlledTransition(c) {\n      if (c.destroyed) return;\n      c.setTransition(duration, swiper);\n\n      if (duration !== 0) {\n        c.transitionStart();\n\n        if (c.params.autoHeight) {\n          nextTick(() => {\n            c.updateAutoHeight();\n          });\n        }\n\n        elementTransitionEnd(c.wrapperEl, () => {\n          if (!controlled) return;\n          c.transitionEnd();\n        });\n      }\n    }\n\n    if (Array.isArray(controlled)) {\n      for (i = 0; i < controlled.length; i += 1) {\n        if (controlled[i] !== byController && controlled[i] instanceof Swiper) {\n          setControlledTransition(controlled[i]);\n        }\n      }\n    } else if (controlled instanceof Swiper && byController !== controlled) {\n      setControlledTransition(controlled);\n    }\n  }\n\n  function removeSpline() {\n    if (!swiper.controller.control) return;\n\n    if (swiper.controller.spline) {\n      swiper.controller.spline = undefined;\n      delete swiper.controller.spline;\n    }\n  }\n\n  on('beforeInit', () => {\n    if (typeof window !== 'undefined' && ( // eslint-disable-line\n    typeof swiper.params.controller.control === 'string' || swiper.params.controller.control instanceof HTMLElement)) {\n      const controlElements = typeof swiper.params.controller.control === 'string' ? [...document.querySelectorAll(swiper.params.controller.control)] : [swiper.params.controller.control];\n      controlElements.forEach(controlElement => {\n        if (!swiper.controller.control) swiper.controller.control = [];\n\n        if (controlElement && controlElement.swiper) {\n          swiper.controller.control.push(controlElement.swiper);\n        } else if (controlElement) {\n          const eventName = `${swiper.params.eventsPrefix}init`;\n\n          const onControllerSwiper = e => {\n            swiper.controller.control.push(e.detail[0]);\n            swiper.update();\n            controlElement.removeEventListener(eventName, onControllerSwiper);\n          };\n\n          controlElement.addEventListener(eventName, onControllerSwiper);\n        }\n      });\n      return;\n    }\n\n    swiper.controller.control = swiper.params.controller.control;\n  });\n  on('update', () => {\n    removeSpline();\n  });\n  on('resize', () => {\n    removeSpline();\n  });\n  on('observerUpdate', () => {\n    removeSpline();\n  });\n  on('setTranslate', (_s, translate, byController) => {\n    if (!swiper.controller.control || swiper.controller.control.destroyed) return;\n    swiper.controller.setTranslate(translate, byController);\n  });\n  on('setTransition', (_s, duration, byController) => {\n    if (!swiper.controller.control || swiper.controller.control.destroyed) return;\n    swiper.controller.setTransition(duration, byController);\n  });\n  Object.assign(swiper.controller, {\n    setTranslate,\n    setTransition\n  });\n}\n\nexport { Controller as default };","map":{"version":3,"names":["n","nextTick","l","elementTransitionEnd","Controller","_ref","swiper","extendParams","on","controller","control","undefined","inverse","by","LinearSpline","x","y","binarySearch","search","maxIndex","minIndex","guess","array","val","length","lastIndex","i1","i3","interpolate","x2","getInterpolateFunction","c","spline","params","loop","slidesGrid","snapGrid","setTranslate","_t","byController","controlled","multiplier","controlledTranslate","Swiper","constructor","setControlledTranslate","destroyed","translate","rtlTranslate","maxTranslate","minTranslate","Number","isNaN","isFinite","updateProgress","updateActiveIndex","updateSlidesClasses","Array","isArray","i","setTransition","duration","setControlledTransition","transitionStart","autoHeight","updateAutoHeight","wrapperEl","transitionEnd","removeSpline","window","HTMLElement","controlElements","document","querySelectorAll","forEach","controlElement","push","eventName","eventsPrefix","onControllerSwiper","e","detail","update","removeEventListener","addEventListener","_s","Object","assign","default"],"sources":["C:/Users/Diogo/Documents/GitHub/SITE-NDB/node_modules/swiper/modules/controller.mjs"],"sourcesContent":["import { n as nextTick, l as elementTransitionEnd } from '../shared/utils.mjs';\r\n\r\n/* eslint no-bitwise: [\"error\", { \"allow\": [\">>\"] }] */\r\nfunction Controller(_ref) {\r\n  let {\r\n    swiper,\r\n    extendParams,\r\n    on\r\n  } = _ref;\r\n  extendParams({\r\n    controller: {\r\n      control: undefined,\r\n      inverse: false,\r\n      by: 'slide' // or 'container'\r\n    }\r\n  });\r\n\r\n  swiper.controller = {\r\n    control: undefined\r\n  };\r\n  function LinearSpline(x, y) {\r\n    const binarySearch = function search() {\r\n      let maxIndex;\r\n      let minIndex;\r\n      let guess;\r\n      return (array, val) => {\r\n        minIndex = -1;\r\n        maxIndex = array.length;\r\n        while (maxIndex - minIndex > 1) {\r\n          guess = maxIndex + minIndex >> 1;\r\n          if (array[guess] <= val) {\r\n            minIndex = guess;\r\n          } else {\r\n            maxIndex = guess;\r\n          }\r\n        }\r\n        return maxIndex;\r\n      };\r\n    }();\r\n    this.x = x;\r\n    this.y = y;\r\n    this.lastIndex = x.length - 1;\r\n    // Given an x value (x2), return the expected y2 value:\r\n    // (x1,y1) is the known point before given value,\r\n    // (x3,y3) is the known point after given value.\r\n    let i1;\r\n    let i3;\r\n    this.interpolate = function interpolate(x2) {\r\n      if (!x2) return 0;\r\n\r\n      // Get the indexes of x1 and x3 (the array indexes before and after given x2):\r\n      i3 = binarySearch(this.x, x2);\r\n      i1 = i3 - 1;\r\n\r\n      // We have our indexes i1 & i3, so we can calculate already:\r\n      // y2 := ((x2−x1) × (y3−y1)) ÷ (x3−x1) + y1\r\n      return (x2 - this.x[i1]) * (this.y[i3] - this.y[i1]) / (this.x[i3] - this.x[i1]) + this.y[i1];\r\n    };\r\n    return this;\r\n  }\r\n  function getInterpolateFunction(c) {\r\n    swiper.controller.spline = swiper.params.loop ? new LinearSpline(swiper.slidesGrid, c.slidesGrid) : new LinearSpline(swiper.snapGrid, c.snapGrid);\r\n  }\r\n  function setTranslate(_t, byController) {\r\n    const controlled = swiper.controller.control;\r\n    let multiplier;\r\n    let controlledTranslate;\r\n    const Swiper = swiper.constructor;\r\n    function setControlledTranslate(c) {\r\n      if (c.destroyed) return;\r\n\r\n      // this will create an Interpolate function based on the snapGrids\r\n      // x is the Grid of the scrolled scroller and y will be the controlled scroller\r\n      // it makes sense to create this only once and recall it for the interpolation\r\n      // the function does a lot of value caching for performance\r\n      const translate = swiper.rtlTranslate ? -swiper.translate : swiper.translate;\r\n      if (swiper.params.controller.by === 'slide') {\r\n        getInterpolateFunction(c);\r\n        // i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid\r\n        // but it did not work out\r\n        controlledTranslate = -swiper.controller.spline.interpolate(-translate);\r\n      }\r\n      if (!controlledTranslate || swiper.params.controller.by === 'container') {\r\n        multiplier = (c.maxTranslate() - c.minTranslate()) / (swiper.maxTranslate() - swiper.minTranslate());\r\n        if (Number.isNaN(multiplier) || !Number.isFinite(multiplier)) {\r\n          multiplier = 1;\r\n        }\r\n        controlledTranslate = (translate - swiper.minTranslate()) * multiplier + c.minTranslate();\r\n      }\r\n      if (swiper.params.controller.inverse) {\r\n        controlledTranslate = c.maxTranslate() - controlledTranslate;\r\n      }\r\n      c.updateProgress(controlledTranslate);\r\n      c.setTranslate(controlledTranslate, swiper);\r\n      c.updateActiveIndex();\r\n      c.updateSlidesClasses();\r\n    }\r\n    if (Array.isArray(controlled)) {\r\n      for (let i = 0; i < controlled.length; i += 1) {\r\n        if (controlled[i] !== byController && controlled[i] instanceof Swiper) {\r\n          setControlledTranslate(controlled[i]);\r\n        }\r\n      }\r\n    } else if (controlled instanceof Swiper && byController !== controlled) {\r\n      setControlledTranslate(controlled);\r\n    }\r\n  }\r\n  function setTransition(duration, byController) {\r\n    const Swiper = swiper.constructor;\r\n    const controlled = swiper.controller.control;\r\n    let i;\r\n    function setControlledTransition(c) {\r\n      if (c.destroyed) return;\r\n      c.setTransition(duration, swiper);\r\n      if (duration !== 0) {\r\n        c.transitionStart();\r\n        if (c.params.autoHeight) {\r\n          nextTick(() => {\r\n            c.updateAutoHeight();\r\n          });\r\n        }\r\n        elementTransitionEnd(c.wrapperEl, () => {\r\n          if (!controlled) return;\r\n          c.transitionEnd();\r\n        });\r\n      }\r\n    }\r\n    if (Array.isArray(controlled)) {\r\n      for (i = 0; i < controlled.length; i += 1) {\r\n        if (controlled[i] !== byController && controlled[i] instanceof Swiper) {\r\n          setControlledTransition(controlled[i]);\r\n        }\r\n      }\r\n    } else if (controlled instanceof Swiper && byController !== controlled) {\r\n      setControlledTransition(controlled);\r\n    }\r\n  }\r\n  function removeSpline() {\r\n    if (!swiper.controller.control) return;\r\n    if (swiper.controller.spline) {\r\n      swiper.controller.spline = undefined;\r\n      delete swiper.controller.spline;\r\n    }\r\n  }\r\n  on('beforeInit', () => {\r\n    if (typeof window !== 'undefined' && (\r\n    // eslint-disable-line\r\n    typeof swiper.params.controller.control === 'string' || swiper.params.controller.control instanceof HTMLElement)) {\r\n      const controlElements = typeof swiper.params.controller.control === 'string' ? [...document.querySelectorAll(swiper.params.controller.control)] : [swiper.params.controller.control];\r\n      controlElements.forEach(controlElement => {\r\n        if (!swiper.controller.control) swiper.controller.control = [];\r\n        if (controlElement && controlElement.swiper) {\r\n          swiper.controller.control.push(controlElement.swiper);\r\n        } else if (controlElement) {\r\n          const eventName = `${swiper.params.eventsPrefix}init`;\r\n          const onControllerSwiper = e => {\r\n            swiper.controller.control.push(e.detail[0]);\r\n            swiper.update();\r\n            controlElement.removeEventListener(eventName, onControllerSwiper);\r\n          };\r\n          controlElement.addEventListener(eventName, onControllerSwiper);\r\n        }\r\n      });\r\n      return;\r\n    }\r\n    swiper.controller.control = swiper.params.controller.control;\r\n  });\r\n  on('update', () => {\r\n    removeSpline();\r\n  });\r\n  on('resize', () => {\r\n    removeSpline();\r\n  });\r\n  on('observerUpdate', () => {\r\n    removeSpline();\r\n  });\r\n  on('setTranslate', (_s, translate, byController) => {\r\n    if (!swiper.controller.control || swiper.controller.control.destroyed) return;\r\n    swiper.controller.setTranslate(translate, byController);\r\n  });\r\n  on('setTransition', (_s, duration, byController) => {\r\n    if (!swiper.controller.control || swiper.controller.control.destroyed) return;\r\n    swiper.controller.setTransition(duration, byController);\r\n  });\r\n  Object.assign(swiper.controller, {\r\n    setTranslate,\r\n    setTransition\r\n  });\r\n}\r\n\r\nexport { Controller as default };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}